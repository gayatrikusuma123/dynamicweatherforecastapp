// Selecting necessary elements from the DOM
const wrapper = document.querySelector(".wrapper"),
    inputPart = document.querySelector(".input-part"),
    infoTxt = inputPart.querySelector(".info-txt"),
    inputField = inputPart.querySelector("input"),
    locationBtn = inputPart.querySelector("button"),
    weatherPart = wrapper.querySelector(".weather-part"),
    wIcon = weatherPart.querySelector("img"),
    arrowBack = wrapper.querySelector("header i");

// API key for accessing weather data
const apiKey = "5d96b89780bc69fa00fa53863a748cb6";
let api;

// Event listener for handling keyup events in the input field
inputField.addEventListener("keyup", (e) => {
    if (e.key === "Enter" && inputField.value !== "") {
        requestApi(inputField.value);
    }
});

// Event listener for handling click events on the location button
locationBtn.addEventListener("click", () => {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(onSuccess, onError);
    } else {
        alert("Your browser does not support geolocation API");
    }
});

// Function to request weather data from the API based on city name
function requestApi(city) {
    api = `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`;
    fetchData();
}

// Success callback for geolocation API
function onSuccess(position) {
    const { latitude, longitude } = position.coords;
    api = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${apiKey}`;
    fetchData();
}

// Error callback for geolocation API
function onError(error) {
    infoTxt.innerText = error.message;
    infoTxt.classList.add("error");
}

// Function to fetch weather data from the API
function fetchData() {
    infoTxt.innerText = "Getting weather details...";
    infoTxt.classList.add("pending");
    fetch(api)
        .then((res) => res.json())
        .then((result) => weatherDetails(result))
        .catch(() => {
            infoTxt.innerText = "Something went wrong, API Error";
            infoTxt.classList.replace("pending", "error");
        });
}

// Function to display weather details on the UI
function weatherDetails(info) {
    if (info.cod === "404") {
        infoTxt.classList.replace("pending", "error");
        infoTxt.innerText = `${inputField.value} isn't a valid city name`;
    } else {
        const city = info.name;
        const country = info.sys.country;
        const { description, id } = info.weather[0];
        const { temp, feels_like, humidity } = info.main;

        // Updating weather icon based on weather condition ID
        if (id === 800) {
            wIcon.src =
                "https://tse3.mm.bing.net/th?id=OIP.HzOIE0Aa1T1YEWaWz-6UiwHaHa&pid=Api&P=0&h=220";
        } else if (id >= 200 && id <= 232) {
            wIcon.src =
                "https://www.pngitem.com/pimgs/m/495-4954337_thunderstorm-weather-forecasting-lightning-thunder-and-lighting-symbol.png";
        } else if (id >= 600 && id <= 622) {
            wIcon.src =
                "https://cdn2.iconfinder.com/data/icons/weather-24/256/Hailstorm-512.png";
        } else if (id >= 701 && id <= 781) {
            wIcon.src =
                "https://cdn2.iconfinder.com/data/icons/weather-120/130/_Windy_Rain_Clouds-512.png";
        } else if (id >= 801 && id <= 804) {
            wIcon.src =
                "https://static.vecteezy.com/system/resources/previews/010/434/057/original/partly-cloudy-color-icon-cloudy-weather-sun-with-clouds-weather-forecast-isolated-illustration-vector.jpg";
        } else if ((id >= 500 && id <= 531) || (id >= 300 && id <= 321)) {
            wIcon.src =
                "https://tse2.mm.bing.net/th?id=OIP.-SMhZJjJzaXDf5f8cUT1jQHaHa&pid=Api&P=0&h=220";
        }

        // Updating weather details on the UI
        weatherPart.querySelector(".temp .numb").innerText = Math.floor(temp);
        weatherPart.querySelector(".weather").innerText = description;
        weatherPart.querySelector(
            ".location span"
        ).innerText = `${city}, ${country}`;
        weatherPart.querySelector(".temp .numb-2").innerText = Math.floor(
            feels_like
        );
        weatherPart.querySelector(".humidity span").innerText = `${humidity}%`;
        infoTxt.classList.remove("pending", "error");
        infoTxt.innerText = "";
        inputField.value = "";
        wrapper.classList.add("active");
    }
}

// Event listener for the arrow back button to hide the weather details section
arrowBack.addEventListener("click", () => {
    wrapper.classList.remove("active");
});


arrowBack.addEventListener("click", () => {
    wrapper.classList.remove("active");
});
